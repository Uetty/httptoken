
how to configure

spring-redis.xml
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig"
		p:max-idle="${redis.maxIdle}" p:max-total="${redis.maxTotal}"
		p:max-wait-millis="${redis.maxWaitMillis}" p:test-on-borrow="${redis.testOnBorrow}" />

	<!-- P:host-name="localhost" 相当于 property name="hostName" value="localhost" 
		p:pool-config-ref="poolConfig" 相当于 property name="poolConfig" ref="poolConfig"
		c命名空间取代
		 -->

	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"
		p:pool-config-ref="poolConfig"  p:database="${redis.database}"/>

	<bean id="serializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="keySerializer" ref="serializer"></property>
		<property name="hashKeySerializer" ref="serializer"></property>
	</bean>
	
	<bean id="redisStringTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>

	<bean id="tokenStrategy" class="com.wanships.framework.RequestParamTokenStrategy"></bean>
	<bean id="tokenDataRepository" class="com.wanships.framework.SpringRedisDataRepository">
		<property name="template" ref="redisTemplate"></property>
		<property name="projectPrefix" value="myprojectname:"></property>
	</bean>
	<bean class="com.wanships.framework.TokenConstitutor">
		<property name="dataRepository" ref="tokenDataRepository"></property>
		<property name="tokenStrategy" ref="tokenStrategy"></property>
	</bean>
	
-------------------------------------------------------------------------------------
	
how to use

	1.
	@Autowired
	TokenConstitutor tokenConstitutor;
	@Autowired(required=false)
	HttpServletRequest request;
	public String getUserId(){
		HttpToken token = tokenConstitutor.getToken(request);
		return (String) token.getAttribute(Constant.TOKEN_KEY_USERID);
	}
	
	2.
	HttpToken token = tokenConstitutor.getTokenById(UUID.randomUUID().toString().replaceAll("-", ""));
	tokenConstitutor.resetToken(token, request);
	token.setAttribute(Constant.TOKEN_KEY_USERID, user.getId());
	
	3.
	HttpToken token = tokenConstitutor.getToken(req);
	List<String> tokenAttrNames = new ArrayList<>();
	tokenAttrNames.add("menus");
	List<String> projectAttrNames = new ArrayList<>();
	projectAttrNames.add(servletPath);
	List<Object> multiAttributes = token.getMultiAttributes(tokenAttrNames, projectAttrNames);
	if(multiAttributes.get(1) != null && !((String)multiAttributes.get(0)).contains("|"+multiAttributes.get(1)+"|")) {
		return false;
	}
	
	4.
	HttpToken token = tokenConstitutor.getToken(req);
	Integer userId = (Integer) token.getAttribute(Constant.TOKEN_KEY_USERID);
	if(userId != null){
		try {
			token.refreshExpire();
		} catch (TokenException e) {
			e.printStackTrace();
		}
		return true;
	}
	return false;
-------------------------------------------------------------------------------------
